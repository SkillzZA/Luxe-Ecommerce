// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  orders        Order[]
  cart          CartItem[]
  wishlist      WishlistItem[]
  addresses     Address[]
}

model Product {
  id            String    @id @default(cuid())
  name          String
  description   String
  price         Float
  comparePrice  Float?
  mainImage     String    // Main product image
  categoryId    String
  category      Category   @relation(fields: [categoryId], references: [id])
  featured      Boolean    @default(false)
  isNew         Boolean    @default(false)
  inStock       Boolean    @default(true)
  stock         Int        @default(0)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  cartItems     CartItem[]
  orderItems    OrderItem[]
  wishlistItems WishlistItem[]
  images        ProductImage[]
}

model Category {
  id            String    @id @default(cuid())
  name          String    @unique
  description   String?
  image         String?
  products      Product[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model ProductImage {
  id            String    @id @default(cuid())
  url           String
  productId     String
  product       Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  alt           String?
  position      Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model CartItem {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId     String
  product       Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity      Int       @default(1)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([userId, productId])
}

model WishlistItem {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId     String
  product       Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())

  @@unique([userId, productId])
}

model Order {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  items         OrderItem[]
  total         Float
  status        OrderStatus @default(PENDING)
  shippingAddressId String
  shippingAddress Address    @relation(fields: [shippingAddressId], references: [id])
  paymentMethod  String
  paymentStatus  PaymentStatus @default(PENDING)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model OrderItem {
  id            String    @id @default(cuid())
  orderId       String
  order         Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId     String
  product       Product   @relation(fields: [productId], references: [id])
  name          String    // Store product name at time of order
  price         Float     // Store product price at time of order
  quantity      Int
}

model Address {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  name          String    // Name for the address (e.g., "Home", "Work")
  line1         String
  line2         String?
  city          String
  state         String
  postalCode    String
  country       String
  phone         String?
  isDefault     Boolean   @default(false)
  orders        Order[]
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}
